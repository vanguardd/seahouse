<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.0.xsd
           http://mybatis.org/schema/mybatis-spring
		   http://mybatis.org/schema/mybatis-spring.xsd
		   http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

    <!-- 隐式地向 Spring容器注册AutowiredAnnotationBeanPostProcessor、RequiredAnnotationBeanPostProcessor、
        CommonAnnotationBeanPostProcessor以及PersistenceAnnotationBeanPostProcessor这4个BeanPostProcessor。 -->
    <!-- <context:component-scan />标签也包含了自动注入上述processor的功能，因此其可以省略 -->
    <!-- <context:annotation-config /> -->

    <!-- 启用注解扫描，并定义组件查找规则 ，除了@controller，扫描所有的Bean -->
    <context:component-scan base-package="com.team.seahouse">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 启用 @AspectJ -->
    <aop:aspectj-autoproxy />


    <!--注册Bean验证后处理器 -->
    <bean
            class="org.springframework.validation.beanvalidation.BeanValidationPostProcessor" />

    <!--注册方法验证的后处理器 -->
    <bean
            class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor" />


    <!-- mybatis:scan会将com.team.seahouse.mapper包里的所有接口当作mapper配置，之后可以自动引入mapper类 -->
    <mybatis:scan base-package="com.team.seahouse.mapper" />


    <!-- 加载读取property配置文件 ,PropertyPlaceholderConfigurer(容器后处理器)支持从properties文件中读入配置并注入到bean中 -->
    <bean
            class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!-- 可从jvm虚拟机的参数中获得配置信息 -->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <property name="ignoreResourceNotFound" value="true" />
        <property name="locations">
            <list>
                <value>classpath:properties/db.properties</value>
                <value>classpath:properties/redis.properties</value>
            </list>
        </property>
    </bean>


    <!-- Mybatis数据库配置 -->
    <!-- 数据源配置,使用Druid数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写,Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driver}" />

        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.pool.init}" />
        <property name="minIdle" value="${jdbc.pool.minIdle}" />
        <property name="maxActive" value="${jdbc.pool.maxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc.maxWait}" />

        <!-- 配置间隔多久才进行一次检测,检测需要关闭的空闲连接,单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间,单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${jdbc.testSql}" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>

    <!-- 配置 sqlSessionFactory -->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源的设置 -->
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 事务配置 -->
    <!-- JDBC事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 启用支持annotation注解方式事务管理 -->
    <tx:annotation-driven transaction-manager="transactionManager" />


    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.pool.maxIdle}"/><!-- 最大闲置 -->
        <property name="minIdle" value="${redis.pool.minIdle}"/><!-- 最小闲置 -->
        <property name="testOnBorrow" value="true"/><!-- 可以获取 -->
        <!--        <property name="testOnReturn" value="true"/>-->
    </bean>
    <!-- redis 配置,也可以把配置挪到properties配置文件中,再读取 -->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig" />
        <!-- 端口，默认6379 -->
        <constructor-arg index="2" value="${redis.port}"  name="port" type="int"/>
        <constructor-arg index="3" value="${redis.timeout}"  name="timeout" type="int"/>
        <constructor-arg index="1" value="${redis.ip}" name="host" type="java.lang.String"/>
        <!-- 如果你需要配置密码，请打开这里。
            <constructor-arg index="4" value="你的密码" name="password" type="java.lang.String"/>
        -->
    </bean>

    <!-- <bean id="securityAspect" class="cn.edu.tju.rico.aspect.SecurityAspect">
        <property name="tokenManager" ref="tokenManager" /> <property name="tokenName"
        value="X-Token" /> </bean> -->
    <bean id="tokenManager" class="com.team.seahouse.commons.authorization.DefaultTokenManager" />
    <!-- <aop:config> <aop:aspect ref="securityAspect"> <aop:around method="execute"
        pointcut="@annotation(org.springframework.web.bind.annotation.RequestMapping)"
        /> </aop:aspect> </aop:config> -->
</beans>